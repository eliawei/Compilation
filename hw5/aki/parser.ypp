%{
    #define YYINITDEPTH 5000
	#include "parser.hpp"
	#include "hw3_output.hpp"
	#include "symbol_table.hpp"
	#include <iostream>
	#include <stdlib.h>
	#include "ir.hpp"

	using namespace std;
	using namespace output;

	int yyerror(const char * message);
	int yylex();
    extern int yylineno;

    symtable* symbol_table;

    void validateBool(Expression* expression, int lineNumber);

    void validateBool(Expression* expression1, Expression* expression2, int lineNumber);

    void validateAssign(Token* type, Expression* value, int lineNumber);

    void validateInt(Expression* expression1, Expression* expression2, int lineNumber);

    void validateByte(Token* number, int lineNumber);

    string relopToLlvm(Relop* relop);

%}

%token TRUE FALSE SC COMMA ID NUM STRING
%token B
%right ASSIGN
%left OR
%left AND
%left EQ_RELOP
%nonassoc OTHER_RELOP
%left ADD_BINOP
%left MUL_BINOP
%right NOT
%left LPAREN RPAREN LBRACE RBRACE
%nonassoc VOID INT BYTE BOOL
%nonassoc ELSE
%nonassoc BREAK
%nonassoc CONTINUE
%nonassoc WHILE
%nonassoc RETURN
%nonassoc IF
%%

Program:		InitFuncs Funcs {$$ = $2;}
;

InitFuncs:       {symbol_table = new symtable();
                 emitGlobal("@.zeroDivision = constant [23 x i8] c\"Error division by zero\\00\"");
                 emitGlobal("@.int_specifier = constant [4 x i8] c\"%d\\0A\\00\"");
                 emitGlobal("@.str_specifier = constant [4 x i8] c\"%s\\0A\\00\"");
                 emit("declare i32 @printf(i8*, ...)");
                 emit("declare void @exit(i32)");
                 emit("define void @printi(i32) {");
                 emit("call i32 (i8*, ...) @printf(i8* getelementptr ([4 x i8], [4");
                 emit("x i8]* @.int_specifier, i32 0, i32 0), i32 %0)");
                 emit("ret void");
                 emit("}");
                 emit("define void @print(i8*) {");
                 emit("call i32 (i8*, ...) @printf(i8* getelementptr ([4 x i8], [4");
                 emit("x i8]* @.str_specifier, i32 0, i32 0), i8* %0)");
                 emit("ret void");
                 emit("}");
                 }
;

Funcs:			{$$ = nullptr;}
				|FuncDecl Funcs{$$ = new Funcs($1, $2);}
;

FuncDecl:		RetType ID LPAREN Formals RPAREN LBRACE {symbol_table->validateNotDeclared(static_cast<Token*>($2), yylineno);
														 symbol_table->addFunction(static_cast<Token*>($2), static_cast<FormalList*>($4), static_cast<Token*>($1));
														 addFunctionToIr(static_cast<Token*>($1), static_cast<Token*>($2), static_cast<FormalList*>($4));}
					Statements M RBRACE
				{$$ = new RecType($1, $2, $4, $8);
				bpatch($8->nextlist, static_cast<Marker*>($9)->label);
                if(static_cast<Token*>($1)->text == "VOID")
                    emit("ret void");
                else{
                	emit("ret i32 1");
                }
                emit("}");
				symbol_table->removeScope();}
;

RetType:		Type {$$ = $1;}
				|VOID {$$ = $1;}
;

Formals:		{$$ = new FormalList(nullptr);}
				|FormalsList {$$ = $1;}
;

FormalsList:	FormalDecl {$$ = new FormalList(static_cast<Var*>($1));}
    			|FormalDecl COMMA FormalsList {$$ = new FormalList(static_cast<Var*>($1), static_cast<FormalList*>($3)); symbol_table->validateParamList(static_cast<Var*>($1), static_cast<FormalList*>($3), yylineno);}
;

FormalDecl:		Type ID {$$ = new Var(static_cast<Token*>($1), static_cast<Token*>($2)); symbol_table->validateNotDeclared(static_cast<Token*>($2), yylineno);}
;

Statements:		Statement {$$ = new Statements($1);
                           $$->nextlist = $1->nextlist;
                           $$->inlist = $1->inlist;
                           $$->outlist = $1->outlist;
                          }
				|Statements M Statement {$$ = new Statements($1, $2);
				                         bpatch($1->nextlist,static_cast<Marker*>($2)->label);
                                         $$->nextlist = $3->nextlist;
                                         $$->inlist = merge($1->inlist, $3->inlist);
                                         $$->outlist = merge($1->outlist, $3->outlist);
				                        }
;

Statement:		LBRACE {symbol_table->addScope(false); } Statements RBRACE {$$ = $3; symbol_table->removeScope();}
				|Type ID SC {$$ = new Var((Token*)$1, (Token*)$2);
							 symbol_table->validateNotDeclared(static_cast<Token*>($2), yylineno);
							 symbol_table->addRecord((Var*)$$);
							 int offset = symbol_table->getStackOffset(static_cast<Token*>($2));
                             string stackPointer = freshReg();
                             emit(stackPointer + "= getelementptr inbounds i32, i32* %funcArgs" + std::to_string(function_counter) + ", i32 " + std::to_string(offset));
                             emit("store i32 0, i32* " + stackPointer);}
				|Type ID ASSIGN Exp SC {$$ = new Var((Token*)$1, (Token*)$2, (Token*)$4);
										symbol_table->validateNotDeclared(static_cast<Token*>($2), yylineno);
				                        validateAssign(static_cast<Token*>($1), static_cast<Expression*>($4), yylineno);
										symbol_table->addRecord((Var*)$$);
										int offset = symbol_table->getStackOffset(static_cast<Token*>($2));
                                        string stackPointer = freshReg();
                                        if(static_cast<Token*>($1)->text.compare("BOOL") != 0){
                                            emit(stackPointer + "= getelementptr inbounds i32, i32* %funcArgs" + std::to_string(function_counter) + ", i32 " + std::to_string(offset));
                                            emit("store i32 " + static_cast<Expression*>($4)->registerName + ", i32* " + stackPointer);
                                        }
                                        else{
                                            string toLoad = boolAssignment($4);
                                            emit(stackPointer + "= getelementptr inbounds i32, i32* %funcArgs" + std::to_string(function_counter) + ", i32 " + std::to_string(offset));
                                            emit("store i32 " + toLoad + ", i32* " + stackPointer);
                                        }}
				|ID ASSIGN Exp SC {$$ = new Assign($1, $3);
								   symbol_table->validateDeclared(static_cast<Token*>($1), yylineno, false);
								   string type = symbol_table->getType(static_cast<Token*>($1), yylineno, false);
								   Token* typeToken = new Token(type);
								   validateAssign(typeToken, static_cast<Expression*>($3), yylineno);
								   int offset = symbol_table->getStackOffset(static_cast<Token*>($1));
                                   string stackPointer = freshReg();
                                   if(typeToken->text.compare("BOOL") != 0){
                                        emit(stackPointer + "= getelementptr inbounds i32, i32* %funcArgs" + std::to_string(function_counter) + ", i32 " + std::to_string(offset));
                                        emit("store i32 " + static_cast<Expression*>($3)->registerName + ", i32* " + stackPointer);
                                   }
                                   else{
                                    string toLoad = boolAssignment($3);
                                    emit(stackPointer + "= getelementptr inbounds i32, i32* %funcArgs" + std::to_string(function_counter) + ", i32 " + std::to_string(offset));
                                    emit("store i32 " + toLoad + ", i32* " + stackPointer);
                                   }}
				|Call SC {$$ = $1;}
				|RETURN SC {symbol_table->validateReturnType(nullptr, yylineno); $$ = new Return();
				            emit("ret void");}
				|RETURN Exp SC {symbol_table->validateReturnType(static_cast<Expression*>($2), yylineno); $$ = new Return($2);
				                if(static_cast<Expression*>($2)->type.compare("BOOL") == 0){
				                    string reg = boolAssignment($2);
				                    emit("ret i32 " + reg);
				                    }
				                else{
				                    emit("ret i32 " + $2->registerName);
				                }
				                }
				|IF LPAREN Exp RPAREN M1 M Statement{$$ = new If($3, $5); symbol_table->removeScope();
				                                        bpatch($3->truelist, static_cast<Marker*>($6)->label);
				                                        $$->nextlist = merge($3->falselist, $7->nextlist);
                                                        $$->inlist = $7->inlist;
                                                        $$->outlist = $7->outlist;
				                                       }
				|IF LPAREN Exp RPAREN M1 M Statement ELSE {symbol_table->removeScope(); symbol_table->addScope(false);
				                                             int address = emit("br label @");
				                                             $7->nextlist = merge($7->nextlist, makelist({address, FIRST}));}
				                                M Statement {$$ = new If($3, $7, $11); symbol_table->removeScope();
				                                           bpatch($3->truelist, static_cast<Marker*>($6)->label);
                                                           bpatch($3->falselist, static_cast<Marker*>($10)->label);
                                                           int address = emit("br label @");
                                                           string label = genLabel();
                                                           $7->nextlist = merge($7->nextlist, makelist({address, FIRST}));
				                                           $$->nextlist = merge($7->nextlist, $11->nextlist);
				                                           bpatch($$->nextlist, label);
				                                           $$->nextlist = vector<pair<int,BranchLabelIndex>>();
				                                           $$->inlist = merge($7->inlist, $11->inlist);
				                                           $$->outlist = merge($7->outlist, $11->outlist);}
				|WHILE LPAREN M Exp RPAREN M2 M Statement {symbol_table->removeScope(); $$ = new While($4, $6);
				                                         bpatch($4->truelist, static_cast<Marker*>($7)->label);
				                                         bpatch($8->nextlist, static_cast<Marker*>($3)->label);
				                                         bpatch($8->inlist, static_cast<Marker*>($3)->label);
				                                         $$->nextlist = merge($8->outlist, $4->falselist);
				                                         int address = emit("br label @");
				                                         bpatch(makelist({address, FIRST}), static_cast<Marker*>($3)->label);}
				|WHILE LPAREN M Exp RPAREN M2 M Statement ELSE {symbol_table->removeScope();
				                                                symbol_table->addScope(false);
				                                                int address = emit("br label @");
				                                                $8->nextlist = merge($8->nextlist, makelist({address, FIRST}));}
				 M Statement {$$ = new While($3, $5, $7); symbol_table->removeScope();
				              bpatch($4->truelist, static_cast<Marker*>($7)->label);
				              bpatch($4->falselist, static_cast<Marker*>($11)->label);
                              bpatch($8->nextlist, static_cast<Marker*>($3)->label);
                              bpatch($8->inlist, static_cast<Marker*>($3)->label);
                              $$->nextlist = merge($12->nextlist, $8->outlist);
                              $$->inlist = $12->inlist;
                              $$->outlist = $12->outlist;}
				|BREAK SC {if(!symbol_table->isWhile()){errorUnexpectedBreak(yylineno); exit(1);}
				           $$ = $1;
				           int address = emit("br label @");
				           $$->outlist = makelist({address, FIRST});}
				|CONTINUE SC {if(!symbol_table->isWhile()){errorUnexpectedContinue(yylineno); exit(1);}
                              $$ = $1;
                              int address = emit("br label @");
                              $$->inlist = makelist({address, FIRST});}
;

M1: 			{symbol_table->addScope(false);}
;
M2: 			{symbol_table->addScope(true);}
;




Call:			ID LPAREN ExpList RPAREN {string type = symbol_table->getType(static_cast<Token*>($1), yylineno, true);
                                          symbol_table->validateDeclared(static_cast<Token*>($1), yylineno, true);
                                          symbol_table->validateFuncArguments(static_cast<Token*>($1), static_cast<ExpList*>($3), yylineno);
                                          $$ = new Call(static_cast<Token*>($1), static_cast<ExpList*>($3), type);
                                          int address = emit("br label @");
                                          $3->nextlist = makelist({address, FIRST});
                                          static_cast<Call*>($$)->registerName = addFunctionCallToIr(static_cast<Call*>($$), $3);}
				|ID LPAREN RPAREN {string type = symbol_table->getType(static_cast<Token*>($1), yylineno, true);
				                   symbol_table->validateDeclared(static_cast<Token*>($1), yylineno, true);
				                   symbol_table->validateFuncArguments(static_cast<Token*>($1), nullptr, yylineno);
				                   $$ = new Call(static_cast<Token*>($1), type);
				                   static_cast<Call*>($$)->registerName = addFunctionCallToIr(static_cast<Call*>($$), nullptr);}
;

ExpList:		Exp {$$ = new ExpList(static_cast<Expression*>($1));}
				|Exp {if(static_cast<Expression*>($1)->type.compare("BOOL") == 0){
				        $1->label = genLabel();}}
				 COMMA ExpList {$$ = new ExpList(static_cast<ExpList*>($4), static_cast<Expression*>($1));}
;

Type:			INT {$$ = $1;}
				|BYTE {$$ = $1;}
				|BOOL {$$ = $1;}
;

Exp:			LPAREN Exp RPAREN {$$ = $2;}
				|Exp MUL_BINOP Exp {validateInt(static_cast<Expression*>($1), static_cast<Expression*>($3), yylineno);
				                    $$ = new Binop(static_cast<Expression*>($1),
				                                   static_cast<Token*>($2),
				                                   static_cast<Expression*>($3));
				                    $$->registerName = freshReg();
                                    if(static_cast<Binop*>($$)->type.compare("INT") == 0){
                                        if(static_cast<Token*>($2)->text.compare("*") == 0){
                                            emit($$->registerName + " = mul i32 " + $1->registerName + "," + $3->registerName);
                                    		}
                                    		else{
                                    		    validateNotZeroDiv(static_cast<Expression*>($3));
                                    		    emit($$->registerName + " = sdiv i32 " + $1->registerName + "," + $3->registerName);
                                    		}
                                    	}
                                    else{
                                        string tempReg = freshReg();
                                        string tempReg2 = freshReg();
                                        if(static_cast<Token*>($2)->text.compare("*") == 0){
                                            emit(tempReg + " = mul i32 " + $1->registerName + "," + $3->registerName);
                                        }
                                        else{
                                            validateNotZeroDiv(static_cast<Expression*>($3));
                                            emit(tempReg + " = sdiv i32 " + $1->registerName + "," + $3->registerName);
                                            }
                                        emit(tempReg2 + " = trunc i32 " + tempReg + " to i8");
                                        emit($$->registerName + "= zext i8 " + tempReg2 + " to i32");
                                    }}
				|Exp ADD_BINOP Exp {validateInt(static_cast<Expression*>($1), static_cast<Expression*>($3), yylineno);
				                    $$ = new Binop(static_cast<Expression*>($1),
				                                   static_cast<Token*>($2),
				                                   static_cast<Expression*>($3));
				                    $$->registerName = freshReg();
				                    if(static_cast<Binop*>($$)->type.compare("INT") == 0){
				                        if(static_cast<Token*>($2)->text.compare("+") == 0){
				                            emit($$->registerName + " = add i32 " + $1->registerName + "," + $3->registerName);
				                        }
				                        else{
				                            emit($$->registerName + " = sub i32 " + $1->registerName + "," + $3->registerName);
				                        }
				                    }
				                    else{
                                        string tempReg = freshReg();
                                        string tempReg2 = freshReg();
                                        if(static_cast<Token*>($2)->text.compare("+") == 0){
                                            emit(tempReg + " = add i32 " + $1->registerName + "," + $3->registerName);
                                        	}
                                        else{
                                        	emit(tempReg + " = sub i32 " + $1->registerName + "," + $3->registerName);
                                        }
                                        emit(tempReg2 + " = trunc i32 " + tempReg + " to i8");
                                        emit($$->registerName + "= zext i8 " + tempReg2 + " to i32");
				                    }}
				|ID {$$ = new Expression(symbol_table->getType(static_cast<Token*>($1), yylineno, false));
				     symbol_table->validateDeclared(static_cast<Token*>($1), yylineno, false);
				     int offset = symbol_table->getStackOffset(static_cast<Token*>($1));
				     string stackPointer = freshReg();
				     emit(stackPointer + "= getelementptr inbounds i32, i32* %funcArgs" + std::to_string(function_counter) + ", i32 " + std::to_string(offset));
				     string reg = freshReg();
				     emit(reg + "= load i32, i32* " + stackPointer);
				     if(static_cast<Expression*>($$)->type.compare("BOOL") == 0){
				        string condBr = freshReg();
                     	emit(condBr + " = icmp eq i32 0, " + reg);
                     	int addr = emit("br i1 " + condBr +", label @, label @");
                     	$$->falselist = makelist({addr,FIRST});
                     	$$->truelist = makelist({addr,SECOND});
				     }
				     else{
				        $$->registerName = reg;
				     }}
				|Call {$$ = $1;}
				|NUM {$$ = new Num(static_cast<Token*>($1));
				      $$->registerName = freshReg();
                      emit($$->registerName + "= add i32 0," + static_cast<Num*>($$)->value->text);}
				|NUM B {validateByte(static_cast<Token*>($1), yylineno);
				        $1 = new Num(static_cast<Token*>($1));
				        $$ = new Bnum(static_cast<Num*>($1));
				        $$->registerName = freshReg();
                        emit($$->registerName + "= add i32 0," + static_cast<Bnum*>($$)->num->value->text);}
				|STRING {$$ = new StringExp(static_cast<Token*>($1));
                         string globalStrReg = stringReg();
                         emitGlobal(globalStrReg + " = constant [" + std::to_string(static_cast<StringExp*>($$)->value.length() + 1) + " x i8] c\"" + static_cast<StringExp*>($$)->value + "\\00\"");
                         string localStrReg = freshReg();
                         emit(localStrReg + " = getelementptr [" + std::to_string(static_cast<StringExp*>($$)->value.length() + 1) + " x i8] , ["+ std::to_string(static_cast<StringExp*>($$)->value.length() + 1) + " x i8]* " + globalStrReg + ", i32 0, i32 0");
                         $$->registerName = localStrReg;
                         }
				|TRUE {$$ = new Bool(static_cast<Token*>($1));
				       int address = emit("br label @");
                       $$->truelist = makelist({address, FIRST});}
				|FALSE {$$ = new Bool(static_cast<Token*>($1));
				        int address = emit("br label @");
                        $$->falselist = makelist({address, FIRST});}
				|NOT Exp {validateBool(static_cast<Expression*>($2), yylineno);
				          $$ = new Not(static_cast<Expression*>($1));
				          $$->truelist = $2->falselist;
				          $$->falselist = $2->truelist;}
				|Exp AND M Exp {validateBool(static_cast<Expression*>($1), static_cast<Expression*>($4), yylineno);
				                 $$ = new And(static_cast<Expression*>($1), static_cast<Expression*>($4));
				                 bpatch($1->truelist, static_cast<Marker*>($3)->label);
				                 $$->falselist = merge($1->falselist, $4->falselist);
				                 $$->truelist = $4->truelist;}
				|Exp OR M Exp {validateBool(static_cast<Expression*>($1), static_cast<Expression*>($4), yylineno);
				             $$ = new Or(static_cast<Expression*>($1), static_cast<Expression*>($4));
				             bpatch($1->falselist, static_cast<Marker*>($3)->label);
				             $$->truelist = merge($1->truelist, $4->truelist);
				             $$->falselist = $4->falselist;}
				|Exp OTHER_RELOP Exp {validateInt(static_cast<Expression*>($1), static_cast<Expression*>($3), yylineno);
				                      $$ = new Relop(static_cast<Expression*>($1), static_cast<Token*>($2), static_cast<Expression*>($3));
				                      string cond = freshReg();
				                      string op = relopToLlvm(static_cast<Relop*>($$));
				                      emit(cond + " = icmp " + op + " i32 " + $1->registerName + ", " + $3->registerName);
				                      int address = emit("br i1 " + cond + ", label @, label @");
				                      $$->truelist = makelist({address, FIRST});
				                      $$->falselist = makelist({address, SECOND});}
				|Exp EQ_RELOP Exp {validateInt(static_cast<Expression*>($1), static_cast<Expression*>($3), yylineno);
				                   $$ = new Relop(static_cast<Expression*>($1), static_cast<Token*>($2), static_cast<Expression*>($3));
				                   string cond = freshReg();
                                   string op = relopToLlvm(static_cast<Relop*>($$));
                                   emit(cond + " = icmp " + op + " i32 " + $1->registerName + ", " + $3->registerName);
                                   int address = emit("br i1 " + cond + ", label @, label @");
                                   $$->truelist = makelist({address, FIRST});
                                   $$->falselist = makelist({address, SECOND});}
;

// Marker
M:              {
                   int address = emit("br label @");
                   string markerLabel = genLabel();
                   bpatch(makelist({address, FIRST}), markerLabel);
                   $$ = new Marker(markerLabel);
                }

;

%%

int main()
{
	yyparse();
    symbol_table->validateMain();
    symbol_table->removeScope();

    printGlobalBuffer();
    printCodeBuffer();
}

int yyerror(const char * message)
{
	errorSyn(yylineno);
	exit(1);
	return 0;
}

void validateBool(Expression* expression, int lineNumber){
    if(expression->type.compare("BOOL") != 0){
        output::errorMismatch(lineNumber);
        exit(1);
    }
}

void validateBool(Expression* expression1, Expression* expression2, int lineNumber){
    if(expression1->type.compare("BOOL") != 0 || expression2->type.compare("BOOL") != 0){
        output::errorMismatch(lineNumber);
        exit(1);
    }
}

void validateAssign(Token* type, Expression* value, int lineNumber){
    if(type->text.compare(value->type) != 0 && (type->text.compare("INT") != 0 || value->type.compare("BYTE") != 0)){
        output::errorMismatch(lineNumber);
        exit(1);
    }
}

void validateInt(Expression* expression1, Expression* expression2, int lineNumber){
    if((expression1->type.compare("INT") != 0 && expression1->type.compare("BYTE") != 0)
        || (expression2->type.compare("INT") != 0 && expression2->type.compare("BYTE") != 0)){
        output::errorMismatch(lineNumber);
        exit(1);
    }
}

void validateByte(Token* number, int lineNumber){
    int value = stoul(number->text);
    if(value > 255){
        output::errorByteTooLarge(lineNumber, number->text);
        exit(1);
    }
}

string relopToLlvm(Relop* relop){
    string op = relop->relop->text;
    if (op.compare("==") == 0)
        return "eq";
    if (op.compare("<") == 0)
        return "slt";
    if (op.compare(">") == 0)
        return "sgt";
    if (op.compare("<=") == 0)
        return "sle";
    if (op.compare(">=") == 0)
        return "sge";
    if (op.compare("!=") == 0)
        return "ne";

}


