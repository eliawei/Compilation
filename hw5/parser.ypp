%{
// C user declarations
#include "parser.hpp"
#include "hw3_output.hpp"
#include "semantic.hpp"
#include "ir.hpp"
#include <iostream>
#include <algorithm> // for copy
#include <iterator> // for ostream_iterator
#include <vector>
using namespace std;
using namespace output;
SymbolTable* symbol_table;
int yylex();
extern int yylineno;
void yyerror(char const*);
%}

// declerations.
// TODO: associative etc.
%token VOID
%token B
%token TRUE
%token FALSE
%token SC
%token COMMA
%token DOTS
%token NUM
%token STRING
%token INT
%token BYTE
%token BOOL
%token SET
%token ID
%right ASSIGN
%left OR
%left AND
%left RELOP_EQ
%nonassoc RELOP_REST
%nonassoc RELOP_IN
%left BINOP_PM
%left BINOP_MD
%right NOT
%left LPAREN
%left RPAREN
%left LBRACE
%left RBRACE
%left LBRACKET
%left RBRACKET
%nonassoc ELSE
%nonassoc BREAK
%nonassoc CONTINUE
%nonassoc RETURN
%nonassoc WHILE
%nonassoc IF

// Rules
%%
Program:
	Init Funcs { 	symbol_table->validateMainFunc();
				$$ = $1; symbol_table->exitScope();}
;
Init:
/*epsilon*/ { symbol_table = new SymbolTable(); 
			  declareInitialFuncs();
			}
;
Funcs: 
	FuncDecl Funcs { $$ = new Funcs($1, $2); }
	| { $$ = new Funcs(); }
;
FuncDecl:
	RetType ID LPAREN Formals RPAREN { symbol_table->insertFunction($2, $1, $4); 
										enterFunctionIR((Token*)$1, (Token*)$2, (FormalsList*)$4);
									 }
	LBRACE Statements RBRACE 		 { symbol_table->exitScope();
									   exitFunctionIR((Token*)$1);
									 }
;
RetType:
	Type {$$ = $1; }
	| VOID {$$ = $1; }
;
Formals:
	/*epsilon*/ {$$ = new FormalsList(); }
	| FormalsList {$$ = $1; }
;
FormalsList:
	FormalDecl {$$ = new FormalsList($1);}
	| FormalDecl COMMA FormalsList { $$ = new FormalsList($1, $3); }
;
FormalDecl:
	Type ID { 	if(symbol_table->isIdentifierDeclared(((Token*)($2))->token, true)){
									output::errorDef(yylineno,((Token*)($2))->token);
									exit(1);
							}
				$$ = new Declaration(((Token*)($1)), ((Token*)($2))); }
;
Statements:
	Statement { $$ = new Statements($1);
				$$->nextlist = $1->nextlist;
				cout << "in statements22222" << ($$->nextlist).size() << endl;
			  }
	| Statements M Statement { $$ = new Statements($2, $1); 
								bpatch($1->nextlist, ((Marker*)($2))->label);
							   $$->nextlist = $3->nextlist;
							 }
;
Statement:
	LBRACE { symbol_table->enterScope(); }

			Statements RBRACE {$$ = $3; 
			cout << "hiiiiiiiiiiiiiiiiiiiiiiiiiiii" <<endl;
							cout << "in statement33333333" << (((Statements*)($2))->nextlist).size() << endl;

							symbol_table->exitScope(); 
						}
	| Type ID SC { 			if(symbol_table->isIdentifierDeclared(((Token*)($2))->token, true)){
								output::errorDef(yylineno,((Token*)($2))->token);
								exit(1);
							}
							symbol_table->insert($1, $2);
							$$ = new Declaration(((Token*)($1)), ((Token*)($2))); 
							int stack_offset = symbol_table->getStackOffset((Token*)($2));
                            string stack_ptr = freshReg();
                            emit(stack_ptr + " = getelementptr inbounds i32, i32* %f" + to_string(function_cnt) + "args, i32 " + to_string(stack_offset));
                            emit("store i32 0, i32* " + stack_ptr);
							}
	| Type ID ASSIGN Exp SC { 	
								if(symbol_table->isIdentifierDeclared(((Token*)($2))->token, true)){
									output::errorDef(yylineno,((Token*)($2))->token);
									exit(1);
								}
								if(!semantic::AssignValid((Token*)($1),(Expression*)($4))){
									output::errorMismatch(yylineno);
									exit(1);
								}
								symbol_table->insert($1, $2); 
								$$ = new Declaration(((Token*)($1)), ((Token*)($2)), ((Token*)($4))); 
								cout << "in declaration1111111" << ($$->nextlist).size() << endl;
								storeInStack(symbol_table, (Token*)($2), (Expression*)($4), (Token*)($1));
								}
	| ID ASSIGN Exp SC { 	
							if(!symbol_table->isIdentifierDeclared(((Token*)($1))->token)){
								output::errorUndef(yylineno,((Token*)($1))->token);
								exit(1);
							}
							// symbol_table->validateAssign($1, $3, yylineno);
							string id_type = symbol_table->getType($1);
							Token* id_type_t = new Token(id_type);
							if(!semantic::AssignValid(id_type_t,(Expression*)($3))){
								output::errorMismatch(yylineno);
								delete id_type_t;
								exit(1);
							}
							$$ = new Assignment($1, $3); 
							storeInStack(symbol_table, (Token*)($1), (Expression*)($3), id_type_t);
							delete id_type_t;
							}
	| Call SC { $$ = $1; }
	| RETURN SC { 	symbol_table->validateRetType(nullptr, yylineno);
					$$ = new Return(); }
	| RETURN Exp SC { 	symbol_table->validateRetType($2, yylineno);
						$$ = new Return((Expression*)($1)); }

	| IF LPAREN Exp RPAREN MIF M Statement { symbol_table->exitScope(); $$ = new If($3, $5);
											 bpatch($3->truelist, ((Marker*)($6))->label);
											 $$->nextlist = merge($7->nextlist, $3->falselist);
											// $$->nextlist = vector<pair<int,BranchLabelIndex>>();

											// $$->nextlist = vector<pair<int,BranchLabelIndex>>();
											}

	| IF LPAREN Exp RPAREN MIF M Statement ELSE { symbol_table->exitScope(); symbol_table->enterScope();
												  bpatch($3->truelist, ((Marker*)($6))->label);
												  int address = emit("br label @");
												  $7->nextlist = merge($7->nextlist, makelist({address, FIRST}));
												}
									M Statement { symbol_table->exitScope(); $$ = new If($3, $5, $7);
												   bpatch($3->falselist, ((Marker*)($9))->label);
												   $$->nextlist = merge($7->nextlist, $10->nextlist);												   
												   string label = genLabel();
												   bpatch($$->nextlist, label);
												}

	| WHILE LPAREN M Exp RPAREN { symbol_table->enterScope(true); }
		 			M Statement { symbol_table->exitScope(); $$ = new While($3, $5);
					 			  bpatch($4->truelist, ((Marker*)($6))->label);
								  bpatch($7->nextlist, ((Marker*)($3))->label);
								  $$->nextlist = $4->nextlist;
		  						}

	| BREAK SC { if(!symbol_table->isWhileScope()){
					output::errorUnexpectedBreak(yylineno);
					exit(1);
				}
				$$ = $1; }
	| CONTINUE SC { if(!symbol_table->isWhileScope()){
						output::errorUnexpectedContinue(yylineno);
						exit(1);
					}
					$$ = $1; }
;
MIF:
	/*epsilon*/ { symbol_table->enterScope(); }
;
Call:
	ID LPAREN ExpList RPAREN { 	
								symbol_table->validateFunctionCall($1, yylineno);
								vector<string>* expected_args = symbol_table->getFuncArgs($1);
								if(!semantic::FuncsArgsTypesValid(((Token*)($1))->token, expected_args,(ExpList*)($3))){
									output::errorPrototypeMismatch(yylineno, ((Token*)($1))->token, *expected_args);
									exit(1);
								}
								string ret_type = symbol_table->getType($1, true);
								$$ = new Call((Token*)($1), (ExpList*)($3), ret_type); 
							}
								
	| ID LPAREN RPAREN { 		symbol_table->validateFunctionCall($1, yylineno);
								string ret_type = symbol_table->getType($1, true);
								$$ = new Call((Token*)($1),ret_type); }
;
ExpList:
	Exp { $$ = new ExpList((Expression*)($1)); }
	| Exp COMMA ExpList { $$ = new ExpList((Expression*)($1), (ExpList*)($3)); }
;
Type:
	INT { $$ = $1; }
	| BYTE { $$ = $1; }
	| BOOL { $$ = $1; }
	| SET LBRACKET NUM DOTS NUM RBRACKET {  symbol_table->validateSetRange($3, $5, yylineno);
											$$ = $1; }
;
Exp:
	LPAREN Exp RPAREN { $$ = $2; }
	| Exp BINOP_MD Exp { 	if(!symbol_table->validateNumeric($1, $3)){
								output::errorMismatch(yylineno);
								exit(1);
							}
							$$ = new Binop((Expression*)($1), (Token*)($2), (Expression*)($3));
							((Binop*)($$))->register_name = freshReg();
							arithmeticCalc((Expression*)($$), (Expression*)($1), (Token*)($2), (Expression*)($3));
							}
	| Exp BINOP_PM Exp { 	if(!symbol_table->validateNumeric($1, $3) && !symbol_table->validateSet($1, $3)){
								output::errorMismatch(yylineno);
								exit(1);
							}
							$$ = new Binop((Expression*)($1), (Token*)($2), (Expression*)($3)); 
							$$->register_name = freshReg();
							arithmeticCalc((Expression*)($$), (Expression*)($1), (Token*)($2), (Expression*)($3));
							}
	| ID { 					if(!symbol_table->isIdentifierDeclared(((Token*)($1))->token)){
									output::errorUndef(yylineno, ((Token*)($1))->token);
									exit(1);
							}
							$$ = new Expression(symbol_table->getType($1));
							handleId(symbol_table, (Expression*)$$, (Token*)$1);
							}
	| Call { $$ = $1; }
	| NUM { $$ = new Num((Token*)($1));
			$$->register_name = freshReg();
			emit($$->register_name + " = add i32 " + ((Num*)($$))->num->token + ", 0"); 
			}
	| NUM B { 	if(!symbol_table->validateByteLen($1)){
					output::errorByteTooLarge(yylineno, ((Token*)$1)->token);
					exit(1);
				}
				$$ = new NumB((Num*)($1));
				$$->register_name = freshReg();
				emit($$->register_name + " = add i32 " + ((Num*)($1))->num->token + ", 0"); 
			}
	| STRING { $$ = new StringExp((Token*)($1));
				emitString((Node*)($$), (Token*)($1));
			 }
	| TRUE { $$ = new Bool((Expression*)($1)); 
			 int address = emit("br label @");
			 $$->truelist = makelist({address, FIRST});
			 }
	| FALSE { $$ = new Bool((Expression*)($1));
			  int address = emit("br label @");
			  $$->falselist = makelist({address, FIRST}); 
			  }
	| NOT Exp { 			if(!symbol_table->validateBoolean($2)){
								output::errorMismatch(yylineno);
								exit(1);
							}
							$$ = new Not((Expression*)($2)); 
							$$->truelist = $2->falselist;
							$$->falselist = $2->truelist;
							}
	| Exp AND M Exp { 		if(!symbol_table->validateBoolean($1, $3)){
								output::errorMismatch(yylineno);
								exit(1);
							}
							$$ = new And((Expression*)($1), (Expression*)($3));
							bpatch($1->truelist, ((Marker*)($3))->label);
							$$->truelist = $4->truelist;
							$$->falselist = merge($1->falselist, $4->falselist);
							}
	| Exp OR M Exp { 		if(!symbol_table->validateBoolean($1, $3)){
								output::errorMismatch(yylineno);
								exit(1);
							}
							$$ = new Or((Expression*)($1), (Expression*)($3)); 
							bpatch($1->falselist, ((Marker*)($3))->label);
							$$->falselist = $4->falselist;
							$$->truelist = merge($1->truelist, $4->truelist);
							}
	| Exp RELOP_EQ Exp { 	if(!symbol_table->validateNumeric($1, $3)){
								output::errorMismatch(yylineno);
								exit(1);
							}
							$$ = new Relop((Expression*)($1), (Token*)($3), (Expression*)($2));
							emitCondition((Node*)($$), (Expression*)($1), (Token*)($2), (Expression*)($3));
							}
	| Exp RELOP_REST Exp { 	if(!symbol_table->validateNumeric($1, $3)){
								output::errorMismatch(yylineno);
								exit(1);
							}
							$$ = new Relop((Expression*)($1), (Token*)($3), (Expression*)($2)); 
							emitCondition((Node*)($$), (Expression*)($1), (Token*)($2), (Expression*)($3));
							}
	| Exp RELOP_IN Exp { 	if(!symbol_table->validateRelopInTypes($1, $3)){
								output::errorMismatch(yylineno);
								exit(1);
							}
							$$ = new Relop((Expression*)($1), (Token*)($3), (Expression*)($2)); }
	| LPAREN Type RPAREN Exp { if(!symbol_table->validateConversion($2, $4)){
								output::errorMismatch(yylineno);
								exit(1);
							}
							$$ = new Expression("INT"); }
;

M: { int buf_address = emit("br label @");
	 string label = genLabel();
	 bpatch(makelist({buf_address, FIRST}), label);
	 $$ = new Marker(label);
	 }
%%

// C user routines

int main(void) {
	int parse;
  	while (parse = yyparse()){};
	printGlobalBuffer();
	printCodeBuffer();
	return 0;
}

void yyerror(char const* s){
	errorSyn(yylineno);
	exit(0);
}