%{
// C user declarations
#include <iostream>
#include "output.hpp"
using namespace output;
int yylex();
void yyerror(char const*);
%}

// declerations.
// TODO: associative etc.
%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token SET
%token TRUE
%token FALSE
%token RETURN
%token IF
%token ELSE
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token ASSIGN
%token AND
%token OR
%token RELOP
%token BINOP
%token NOT
%token LPAREN
%token RPAREN
%token LBRACE
%token RBRACE
%token LBRACKET
%token RBRACKET
%token DOTS
%token ID
%token NUM
%token STRING

// Rules
%%
Program:
	Funcs { printProductionRule(1); }
;
Funcs: 
	FuncDecl Funcs { printProductionRule(3); }
	| { printProductionRule(2); }
;
FuncDecl:
	RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE { printProductionRule(4); }
;
RetType:
	Type { printProductionRule(5); }
;
RetType:
	VOID { printProductionRule(6); }
;
Formals:
	/*epsilon*/ { printProductionRule(7); }
;
Formals:
	FormalsList { printProductionRule(8); }
;
FormalsList:
	FormalDecl { printProductionRule(9); }
;
FormalsList:
	FuncDecl COMMA FormalsList { printProductionRule(10); }
;
FormalDecl:
	Type ID { printProductionRule(11); }
;
Statements:
	Statement { printProductionRule(12); }
;
Statements:
	Statements Statement { printProductionRule(13); }
;
Statement:
	LBRACE Statements RBRACE { printProductionRule(14); }
;
Statement:
	Type ID SC { printProductionRule(15); }
;
Statement:
	Type ID ASSIGN Exp SC { printProductionRule(16); }
;
Statement:
	ID ASSIGN Exp SC { printProductionRule(17); }
;
Statement:
	Call SC { printProductionRule(18); }
;
Statement:
	RETURN SC { printProductionRule(19); }
;
Statement:
	RETURN Exp SC { printProductionRule(20); }
;
Statement:
	IF LPAREN Exp RPAREN Statement { printProductionRule(21); }
;
Statement:
	IF LPAREN Exp RPAREN Statement ELSE Statement { printProductionRule(22); }
;
Statement:
	WHILE LPAREN Exp RPAREN Statement { printProductionRule(23); }
;
Statement:
	BREAK SC { printProductionRule(24); }
;
Statement:
	CONTINUE SC { printProductionRule(25); }
;
Call:
	ID LPAREN ExpList RPAREN { printProductionRule(26); }
;
Call:
	ID LPAREN RPAREN { printProductionRule(27); }
;
ExpList:
	Exp { printProductionRule(28); }
;
ExpList:
	Exp COMMA ExpList { printProductionRule(29); }
;
Type:
	INT { printProductionRule(30); }
;
Type:
	BYTE { printProductionRule(31); }
;
Type:
	BOOL { printProductionRule(32); }
;
Type:
	SET LBRACKET NUM DOTS NUM RBRACKET { printProductionRule(33); }
;
Exp:
	LPAREN Exp RPAREN { printProductionRule(34); }
;
Exp:
	Exp BINOP Exp { printProductionRule(35); }
;
Exp:
	ID { printProductionRule(36); }
;
Exp:
	Call { printProductionRule(37); }
;
Exp:
	NUM { printProductionRule(38); }
;
Exp:
	NUM B { printProductionRule(39); }
;
Exp:
	STRING { printProductionRule(40); }
;
Exp:
	TRUE { printProductionRule(41); }
;
Exp:
	FALSE { printProductionRule(42); }
;
Exp:
	NOT Exp { printProductionRule(43); }
;
Exp:
	Exp AND Exp { printProductionRule(44); }
;
Exp:
	Exp OR Exp { printProductionRule(45); }
;
Exp:
	Exp RELOP Exp { printProductionRule(46); }
;
Exp:
	LPAREN Type RPAREN Exp { printProductionRule(47); }
;
%%

// C user routines

int main(void) {
	int parse;
  	while (parse = yyparse()){};
	return 0;
}
void yyerror(char const* s){}